
// По заданной строке, являющейся абсолютным адресом в Unix-системе, вам необходимо получить канонический адрес.
// В Unix-системе "." соответствует текущей директории, ".." — родительской директории,
// при этом будем считать, что любое количество точек подряд, большее двух, соответствует директории с таким названием (состоящем из точек).
// "/" является разделителем вложенных директорий, причем несколько "/" подряд должны интерпретироваться как один "/".

// Канонический путь должен обладать следующими свойствами:
// 1) всегда начинаться с одного "/"
// 2) любые две вложенные директории разделяются ровно одним знаком "/"
// 3) путь не заканчивается "/" (за исключением корневой директории, состоящего только из символа "/")
// 4) в каноническом пути есть только директории, т.е. нет ни одного вхождения "." или ".." как соответствия текущей или родительской директории

// Формат ввода
// Вводится строка с абсолютным адресом, её длина не превосходит 100.

// Формат вывода
// Выведите канонический путь.

import java.util.*;

public class CanonicalPath {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        String path = input.nextLine();
        // убираем 2 и более /
        path = path.replaceAll("/{2,}", "/");
        // разбиваем на части по /
        String[] parts = path.split("/");
        // создаем стек для хранения компонентов пути
        Stack<String> stack = new Stack<>();
        for (String part : parts) {
            // если текущая часть равна ".." и стек не пустой, удаляем последний элемент из стека
            if (part.equals("..")) {
                if (!stack.isEmpty()) {
                    stack.pop();
                }
            }
            // иначе добавляем текущую часть в стек если текущая часть не пуста и не равна "."
            else if (!part.equals(".") && !part.isEmpty()) {
                stack.push(part);
            }
        }
        // собираем путь
        StringBuilder canonicalPath = new StringBuilder("/");
        for (int i = 0; i < stack.size(); i++) {
            if (i > 0) {
                canonicalPath.append("/");
            }
            canonicalPath.append(stack.get(i));
        }
        System.out.println(canonicalPath);
        input.close();
    }
}
